{
  "comments": [
    {
      "key": {
        "uuid": "b1633ec9_63586a40",
        "filename": "pc/webrtcsession.cc",
        "patchSetId": 1
      },
      "lineNbr": 991,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-03T04:12:24Z",
      "side": 1,
      "message": "Is there a reason this isn\u0027t this happening in WebRtcVideoEngine when recv_rtp_extensions_ is changed? That\u0027s typically where interactions with Call and processing of parameters happens.",
      "revId": "5e1f2caf95e4d76ed0626617ba152f4ec5ca56b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75a0ebf_56a09eaf",
        "filename": "pc/webrtcsession.cc",
        "patchSetId": 1
      },
      "lineNbr": 991,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-03T06:24:28Z",
      "side": 1,
      "message": "The goal here is to take out WebRtcVideoEngine and Call from the loop. I\u0027d like to move parsing, including extensions, to RtpStreamReceiverController (the object which also owns the new demuxer). WebRtcSession/PeerConnection is responsible for translating SDP to the set of RTP extensions to process on the receive path, and it will also be the owner of RtpStreamReceiverController, so I think that should work out nicely.\n\nAs far as I understand, the only reason Call and WebRtcVideoEngine currently need to be on the per-packet receive path is for the handling of unsignalled ssrcs. If we can find a different way to register unsignalled callbacks in the demuxer, that shouldn\u0027t be needed. For the bundled case, unsignalled callback needs to be registered per payload-type, while with unbundled, a catch-all callback would do. \n\nSo moving configuration of extensions is only one step in a long process.",
      "parentUuid": "b1633ec9_63586a40",
      "revId": "5e1f2caf95e4d76ed0626617ba152f4ec5ca56b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "008269e5_08a0f653",
        "filename": "pc/webrtcsession.cc",
        "patchSetId": 1
      },
      "lineNbr": 991,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-03T14:16:07Z",
      "side": 1,
      "message": "Ok, then this should ultimately go in the RtpTransport class (which we\u0027re still working on breaking out of BaseChannel). But for now, since that work isn\u0027t complete yet, this code would the most sense in BaseChannel. WebRtcSession/PeerConnection aren\u0027t planned to be DIRECTLY responsible for applying things to Call based on SDP (and also, given what I understand about RtpStreamReceiverController, they don\u0027t make sense as its owner). The idea is that BaseChannel will become \"RtpTransceiver\" and will be responsible for applying the SDP of each m\u003d section, TransportController would apply the transport-layer parts of SDP (including RTP, which currently happens in BaseChannel), and the RtpTransport set of classes would handle the actual interactions with Call (and libsrtp). Maybe we need to coordinate our plans more.\n\nI\u0027m with you with regards to taking WebRtcVideoEngine out of the per-packet receive path, though.",
      "parentUuid": "b75a0ebf_56a09eaf",
      "revId": "5e1f2caf95e4d76ed0626617ba152f4ec5ca56b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55d1cbdf_dba91877",
        "filename": "pc/webrtcsession.cc",
        "patchSetId": 1
      },
      "lineNbr": 991,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-04T13:06:51Z",
      "side": 1,
      "message": "Thanks for the explanation, I\u0027m not up-to-date regarding the BaseChannel work.\n\nAt my end, the short-term objective is to get rtp extensions out of VideoReceiveStream and AudioReceiveStream, and move parsing from Call to RtpReceiveStreamController, which I hope should align well with BaseChannel/TransportController work. Adding a SetVideoReceiveHeaderExtensions method to Call seemed like a reasonable intermediate step, but I\u0027m happy go some other route if you can suggest one.\n\nWhen we get to injecting RtpStreamReceiverController and RtpTransportControllerSend into Call, who should be owning those objects?",
      "parentUuid": "008269e5_08a0f653",
      "revId": "5e1f2caf95e4d76ed0626617ba152f4ec5ca56b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}