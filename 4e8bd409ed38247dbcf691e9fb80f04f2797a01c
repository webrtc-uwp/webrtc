{
  "comments": [
    {
      "key": {
        "uuid": "af7f6a5b_b69c47c7",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "This was previously a move assignment, since the rhs was a temporary. It can keep being one if you use std::move.",
      "range": {
        "startLine": 107,
        "startChar": 27,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b5c50cc_be7b688a",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "You hold this lock until the end of the block, so there\u0027s no need to introduce a new {} block.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8aec38f_bb7a6ff2",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "This sequence of calls to neteq_ seems like it may fail if someone else is concurrently accessing the same NetEq instance (such as a concurrent call to the present method). Didn\u0027t the lock annotations catch this?",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cea18f3_8d0b30e1",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:14:03Z",
      "side": 1,
      "message": "Hmm, there are no lock annotations on that member:\n\n  NetEq* neteq_;\n\nIt should probably be\n\n  NetEq* neteq_ GUARDED_BY(crit_sect_) PT_GUARDED_BY(crit_sect_);\n\nor (even better, if it works)\n\n  NetEq* const neteq_ PT_GUARDED_BY(crit_sect_);\n\n(Also, I find it puzzling that we have a raw pointer to the NetEq and don\u0027t own it. But that may be a deeper rabbit hole than appropriate for this CL.)",
      "parentUuid": "c8aec38f_bb7a6ff2",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f74589af_f0debe11",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-13T09:19:04Z",
      "side": 1,
      "message": "NetEq is thread-safe in itself. So, the potential problem as I see it is that someone changes the pointer for us.\n\nWe should preferably make it a const unique_ptr, but let\u0027s do that in a follow-up.",
      "parentUuid": "8cea18f3_8d0b30e1",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4aa712_9af03b26",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:47:53Z",
      "side": 1,
      "message": "No. No matter how threadsafe NetEq is, it can only protect itself against concurrent access for the duration of a method call. Here, we call two NetEq methods in sequence (RemovePayloadType and LastError) and expect that no one else has called the NetEq instance in between.",
      "parentUuid": "f74589af_f0debe11",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "294e5e02_b6b65066",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 276,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "You don\u0027t release the lock until the block ends anyway, so don\u0027t introduce a new block.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99ad7fef_56d44058",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "Here\u0027s another neteq_ call sequence that looks racy.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "942600ec_d08a287d",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "No new block needed here either.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}