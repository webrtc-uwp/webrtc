{
  "comments": [
    {
      "key": {
        "uuid": "092bd1c2_d4f2276d",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-15T10:22:58Z",
      "side": 1,
      "message": "Maybe theoretical, but moving this call out of the critical section allows someone else to remap the payload type before we get around to calling InsertPacket() below. There\u0027s even a similar race inside RtpHeaderToDecoder...\n\nThis is pretty much the same problem as with LasteError(); although each NetEq method call protects itself, the caller needs to make two or more NetEq calls in an atomic sequence.",
      "range": {
        "startLine": 86,
        "startChar": 6,
        "endLine": 86,
        "endChar": 24
      },
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af7f6a5b_b69c47c7",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "This was previously a move assignment, since the rhs was a temporary. It can keep being one if you use std::move.",
      "range": {
        "startLine": 107,
        "startChar": 27,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0e67986_4398c4a4",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-15T10:22:58Z",
      "side": 1,
      "message": "Oh, look---another race...",
      "range": {
        "startLine": 132,
        "startChar": 45,
        "endLine": 132,
        "endChar": 71
      },
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b5c50cc_be7b688a",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "You hold this lock until the end of the block, so there\u0027s no need to introduce a new {} block.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8aec38f_bb7a6ff2",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "This sequence of calls to neteq_ seems like it may fail if someone else is concurrently accessing the same NetEq instance (such as a concurrent call to the present method). Didn\u0027t the lock annotations catch this?",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cea18f3_8d0b30e1",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:14:03Z",
      "side": 1,
      "message": "Hmm, there are no lock annotations on that member:\n\n  NetEq* neteq_;\n\nIt should probably be\n\n  NetEq* neteq_ GUARDED_BY(crit_sect_) PT_GUARDED_BY(crit_sect_);\n\nor (even better, if it works)\n\n  NetEq* const neteq_ PT_GUARDED_BY(crit_sect_);\n\n(Also, I find it puzzling that we have a raw pointer to the NetEq and don\u0027t own it. But that may be a deeper rabbit hole than appropriate for this CL.)",
      "parentUuid": "c8aec38f_bb7a6ff2",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f74589af_f0debe11",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-13T09:19:04Z",
      "side": 1,
      "message": "NetEq is thread-safe in itself. So, the potential problem as I see it is that someone changes the pointer for us.\n\nWe should preferably make it a const unique_ptr, but let\u0027s do that in a follow-up.",
      "parentUuid": "8cea18f3_8d0b30e1",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4aa712_9af03b26",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:47:53Z",
      "side": 1,
      "message": "No. No matter how threadsafe NetEq is, it can only protect itself against concurrent access for the duration of a method call. Here, we call two NetEq methods in sequence (RemovePayloadType and LastError) and expect that no one else has called the NetEq instance in between.",
      "parentUuid": "f74589af_f0debe11",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b166aabc_88e14e40",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-13T10:16:26Z",
      "side": 1,
      "message": "That\u0027s another story. But lock annotation won\u0027t help you there either (in theory).\n\nNevertheless, I created a CL to clean up the ownership of the NetEq object: https://chromium-review.googlesource.com/c/533073/",
      "parentUuid": "9f4aa712_9af03b26",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "587b25e8_72ca9b3f",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T11:05:54Z",
      "side": 1,
      "message": "Well, it would help as much as it ever does. For any lock-annotated variable x_, you can always replace the correct\n\n  rtc::CritScope lock(\u0026crit_sect_);\n  x_ \u003d ComputeNewValue(x_);\n\nwith the incorrect\n\n  int new_x;\n  {\n    rtc::CritScope lock(\u0026crit_sect_);\n    new_x \u003d ComputeNewValue(x_);\n  }\n  {\n    rtc::CritScope lock(\u0026crit_sect_);\n    x_ \u003d new_x;\n  }\n\nand the compiler won\u0027t complain. The lock annotations are useful because they remind you that you need to take the lock at all; it\u0027s up to you to not release it in the middle of what needs to be an atomic sequence of actions.\n\nIn contrast, if you have a supposedly thread-safe object that uses locks internally, any sequence of method calls\n\n  x_-\u003eMeth();\n  x_-\u003eCoke();\n\nhad better not need to be an atomic sequence. But this is exactly the situation we have with NetEq\u0027s LastError() method.",
      "parentUuid": "b166aabc_88e14e40",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9887f628_2f2891a9",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-13T12:14:18Z",
      "side": 1,
      "message": "As I wrote in my follow-up CL, I propose we scrap LastError().",
      "parentUuid": "587b25e8_72ca9b3f",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0498d1c7_8002f5a4",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-14T08:56:12Z",
      "side": 1,
      "message": "Uploaded https://chromium-review.googlesource.com/c/535533/ where Last{Decoder}Error() is deleted. It affects these lines in acm_receiver.cc, so we could consider landing that CL before this one.",
      "parentUuid": "9887f628_2f2891a9",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32d6058b_96eb9950",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1118997
      },
      "writtenOn": "2017-06-14T09:33:57Z",
      "side": 1,
      "message": "Please land 535533 first.",
      "parentUuid": "0498d1c7_8002f5a4",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1714dba0_e2633a1d",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-14T09:36:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32d6058b_96eb9950",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbfd012b_a5d4d4b2",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1122982
      },
      "writtenOn": "2017-06-14T12:11:08Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/535533 has landed.",
      "parentUuid": "1714dba0_e2633a1d",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "294e5e02_b6b65066",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 276,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "You don\u0027t release the lock until the block ends anyway, so don\u0027t introduce a new block.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99ad7fef_56d44058",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "Here\u0027s another neteq_ call sequence that looks racy.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "942600ec_d08a287d",
        "filename": "webrtc/modules/audio_coding/acm2/acm_receiver.cc",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-06-13T09:04:13Z",
      "side": 1,
      "message": "No new block needed here either.",
      "revId": "4e8bd409ed38247dbcf691e9fb80f04f2797a01c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}