{
  "comments": [
    {
      "key": {
        "uuid": "5fe758a8_851140a1",
        "filename": "webrtc/test/frame_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-07T07:12:40Z",
      "side": 1,
      "message": "This and below memset relies on the I420Buffer allocating the planes with no \nextra padding. It would be nice to either: add a comment on I420Buffer::Create promising that, or compute the sizes as height * stride, or use libyuv::SetPlane.",
      "range": {
        "startLine": 55,
        "startChar": 54,
        "endLine": 55,
        "endChar": 60
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af0afa49_94a276be",
        "filename": "webrtc/test/frame_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1117641
      },
      "writtenOn": "2017-06-07T09:34:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fe758a8_851140a1",
      "range": {
        "startLine": 55,
        "startChar": 54,
        "endLine": 55,
        "endChar": 60
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0719065_62a041a3",
        "filename": "webrtc/test/frame_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-07T07:12:40Z",
      "side": 1,
      "message": "Unrelated to this cl, but would it be possible to replace KeepRefUntilDone by an unnamed lambda\ncapturing i420_buffer? Would be nice to delete base/callback.h, which has very few users of which this is one.",
      "range": {
        "startLine": 266,
        "startChar": 36,
        "endLine": 266,
        "endChar": 52
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9d1017f_4127b253",
        "filename": "webrtc/test/frame_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1117641
      },
      "writtenOn": "2017-06-07T09:34:39Z",
      "side": 1,
      "message": "What would the argument type be for the WrappedI420Buffer ctor then, a template type? I\u0027m fine with whatever, but I won\u0027t change anything in this CL.",
      "parentUuid": "f0719065_62a041a3",
      "range": {
        "startLine": 266,
        "startChar": 36,
        "endLine": 266,
        "endChar": 52
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3816493_7be92b7a",
        "filename": "webrtc/test/frame_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-07T10:40:39Z",
      "side": 1,
      "message": "I\u0027d hope a std::function would work, but I\u0027m not enough of a C++ guru to really say what\u0027s right.",
      "parentUuid": "a9d1017f_4127b253",
      "range": {
        "startLine": 266,
        "startChar": 36,
        "endLine": 266,
        "endChar": 52
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58044133_c987fee2",
        "filename": "webrtc/test/frame_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1117641
      },
      "writtenOn": "2017-06-07T10:55:01Z",
      "side": 1,
      "message": "Yes, std::function would do it, but I know that\u0027s one of the banned C++11 features.",
      "parentUuid": "f3816493_7be92b7a",
      "range": {
        "startLine": 266,
        "startChar": 36,
        "endLine": 266,
        "endChar": 52
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2366901_a4d0985f",
        "filename": "webrtc/test/frame_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-07T07:12:40Z",
      "side": 1,
      "message": "nit: Prefer consistent line breaks and indent of all three EqualPlane calls.",
      "range": {
        "startLine": 64,
        "startChar": 9,
        "endLine": 64,
        "endChar": 19
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60a41570_935546e0",
        "filename": "webrtc/test/frame_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1117641
      },
      "writtenOn": "2017-06-07T09:34:39Z",
      "side": 1,
      "message": "This is the result of \u0027git cl format\u0027. I personally don\u0027t think we should spend time maintaining manual indentation unless it\u0027s really important, but I fixed this one anyway since you asked for it.",
      "parentUuid": "f2366901_a4d0985f",
      "range": {
        "startLine": 64,
        "startChar": 9,
        "endLine": 64,
        "endChar": 19
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2324fd2b_eaad64d4",
        "filename": "webrtc/test/frame_utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-07T10:40:39Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "60a41570_935546e0",
      "range": {
        "startLine": 64,
        "startChar": 9,
        "endLine": 64,
        "endChar": 19
      },
      "revId": "506262c25422dcac2b1193a7d1c4aef27204c6a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}