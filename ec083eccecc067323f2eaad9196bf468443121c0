{
  "comments": [
    {
      "key": {
        "uuid": "5d76b3aa_2f3f8378",
        "filename": "modules/rtp_rtcp/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "why put .cc in include instead of source?",
      "range": {
        "startLine": 48,
        "startChar": 5,
        "endLine": 48,
        "endChar": 12
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0848d8c_d652791c",
        "filename": "modules/rtp_rtcp/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "Because that\u0027s where the corresponding .h file is.\n\nThere are basically no good reasons against putting the .cc file next to the .h file, and at least two good reasons for: the files are easier to locate, and it becomes easier to have BUILD.gn files all the way out in the leaf directories.\n\nA style guide rule about this is on my TODO list.\n\nBecause of your comments on the .h file below I\u0027m removing the .cc file from this CL, but it\u0027ll come back in CL #3 when I add Optional member variables.",
      "parentUuid": "5d76b3aa_2f3f8378",
      "range": {
        "startLine": 48,
        "startChar": 5,
        "endLine": 48,
        "endChar": 12
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e11e761b_2822fe58",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "I guess you need default constructor for backward compatibility",
      "range": {
        "startLine": 55,
        "startChar": 20,
        "endLine": 55,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58491786_2623f310",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "I don\u0027t *think* so. This is kinda-sorta part of the API, but no project that I\u0027ve seen is constructing these. I could provide a default constructor if necessary, but that would mean dropping the nice invariant that a PayloadUnion always contains either audio or video data.",
      "parentUuid": "e11e761b_2822fe58",
      "range": {
        "startLine": 55,
        "startChar": 20,
        "endLine": 55,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3872e608_51b16ab8",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T18:20:55Z",
      "side": 1,
      "message": "my bad - confused it with another union.\nIt is sure better without it.",
      "parentUuid": "58491786_2623f310",
      "range": {
        "startLine": 55,
        "startChar": 20,
        "endLine": 55,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92acb703_cdd0cc01",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "what is benefit of explicit move when move is as expensive as copy?",
      "range": {
        "startLine": 60,
        "startChar": 31,
        "endLine": 60,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3ee10f7_a8a23b9c",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "Well... none currently. But the audio data will soon become an SdpAudioFormat, which is copyable but more efficient to move than to copy. I\u0027ll remove it for now though.",
      "parentUuid": "92acb703_cdd0cc01",
      "range": {
        "startLine": 60,
        "startChar": 31,
        "endLine": 60,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d983e5eb_bec4f76b",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "do you need to declare trivial destructor?",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61cc21ed_81e57971",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "Not currently. I\u0027ll remove it for now, but it\u0027ll come back in CL #3 in this series when I add Optional member variables. (I originally made one integrated change which I then had to split up.)",
      "parentUuid": "d983e5eb_bec4f76b",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c9c53e9_081377d4",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "same question as for move - why add swap when it doesn\u0027t anything over default version?",
      "range": {
        "startLine": 65,
        "startChar": 53,
        "endLine": 65,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b404b461_467031c9",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "Habit. It\u0027s slightly more efficient than the sequence of three moves that std::swap will use. I\u0027m not as attached to this one as to move constructor and move assignment, though. Removed.",
      "parentUuid": "8c9c53e9_081377d4",
      "range": {
        "startLine": 65,
        "startChar": 53,
        "endLine": 65,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22b59f72_8c8e5fae",
        "filename": "modules/rtp_rtcp/source/rtp_payload_registry.cc",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "emplace is slighly nicer:\nauto insert_status \u003d payload_type_map_.emplace(audio_codec.pltype, CreatePayloadType(audio_codec));",
      "range": {
        "startLine": 167,
        "startChar": 54,
        "endLine": 167,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f82f518_26510665",
        "filename": "modules/rtp_rtcp/source/rtp_payload_registry.cc",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "It is. Thanks!",
      "parentUuid": "22b59f72_8c8e5fae",
      "range": {
        "startLine": 167,
        "startChar": 54,
        "endLine": 167,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3734c041_534e14dc",
        "filename": "modules/rtp_rtcp/source/rtp_receiver_strategy.cc",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "why not \nlast_payload_.emplace(payload) ?",
      "range": {
        "startLine": 31,
        "startChar": 55,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56f712ad_304fd207",
        "filename": "modules/rtp_rtcp/source/rtp_receiver_strategy.cc",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3734c041_534e14dc",
      "range": {
        "startLine": 31,
        "startChar": 55,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5a8b45b_2b255375",
        "filename": "modules/rtp_rtcp/source/rtp_receiver_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 143,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-09-28T13:22:39Z",
      "side": 1,
      "message": "may be use regular () to stress regular constructor is used:\n... payload_specific(AudioPayload());",
      "range": {
        "startLine": 143,
        "startChar": 54,
        "endLine": 143,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48cd1d0c_e78a7f7f",
        "filename": "modules/rtp_rtcp/source/rtp_receiver_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 143,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-09-28T18:12:20Z",
      "side": 1,
      "message": "No. I did that originally, but that causes the Most Vexing Parse. It could be resolved by using (()) instead of {}, but I personally prefer the latter.",
      "parentUuid": "c5a8b45b_2b255375",
      "range": {
        "startLine": 143,
        "startChar": 54,
        "endLine": 143,
        "endChar": 0
      },
      "revId": "ec083eccecc067323f2eaad9196bf468443121c0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}