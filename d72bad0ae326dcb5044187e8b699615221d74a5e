{
  "comments": [
    {
      "key": {
        "uuid": "a8c156a2_809a0840",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "I see SSRCs are verified before anything is applied, but MIDs, PTs and RSIDs aren\u0027t. What if we have a defective RSID, for instance?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7be27347_810bf924",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "What do you mean by defective? RSIDs with invalid characters will be caught by the DCHECK above (although could change that to a CHECK).",
      "parentUuid": "a8c156a2_809a0840",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11176984_d102de3d",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "I think we should verify MIDs and RSIDs as well.  But PTs are different (they can overlap).",
      "parentUuid": "7be27347_810bf924",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd01fc16_f03805d3",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T22:39:13Z",
      "side": 1,
      "message": "MIDs and RSIDs can overlap though. I can use MIDs \"video1\" and \"video2\", and RIDs \"full\"/\"half\"/\"quarter\". Neither the MID nor RID is unique per stream.",
      "parentUuid": "11176984_d102de3d",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41bdc2f2_ffc86da7",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "What if this mid-sink association already exists? We probably want to DCHECK against that. I think there\u0027s a helper function that would let you do that with relatively painless syntax.\nSimilarly elsewhere.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57214da4_cc129f56",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "For MIDs, if multiple sinks are registered for that same MID then the demuxing algorithm knows it cannot use just that field for demuxing.",
      "parentUuid": "41bdc2f2_ffc86da7",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caf15f8c_64e186d0",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "We should return false like we do for SSRC overlap.",
      "parentUuid": "57214da4_cc129f56",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0813d964_b46610a6",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T20:39:22Z",
      "side": 1,
      "message": "No we shouldn\u0027t; if you\u0027re using the demuxer for \"per encoding\" sinks, it\u0027s valid for two sinks to have the same MID but different RIDs, and end up demuxed either using \"sinks_by_rsid_\" or \"sinks_by_rsid_mid_\".",
      "parentUuid": "caf15f8c_64e186d0",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daf09f81_d6d44e3a",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T20:53:05Z",
      "side": 1,
      "message": "But we\u0027re not implementing per-encoding sinks yet.  When we do, we can figure out how to reject or not.  Then we\u0027ll need something more complex.  But for now, I think we should stick with the simple thing, which is only one sink per MID.",
      "parentUuid": "0813d964_b46610a6",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89574969_f64265a0",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T22:39:13Z",
      "side": 1,
      "message": "\u003e But we\u0027re not implementing per-encoding sinks yet. \n\nBut we are... see comment further down.",
      "parentUuid": "daf09f81_d6d44e3a",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0396ace8_88c76c99",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "I wonder if protection against duplicates would be over-the-top?\n(Note: SSRC duplicates already handled gracefully.)",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b76527b_d7dd1a92",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "I think this is also covered by the above comment about MIDs.",
      "parentUuid": "0396ace8_88c76c99",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1690bb20_3ff64695",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "PTs can overlap, so it should be accepted.",
      "parentUuid": "1b76527b_d7dd1a92",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6276fd37_24b5229b",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "Prefer push_back() over emplace_back() when emplace_back() isn\u0027t more efficient (as is the case with primitive arithmetic types), because emplace_back() requires the reader to check the vector\u0027s type to see what kind of ctor will be invoked. (Link to more elaborate discussion sent offline.)",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "779c5bbb_773f7c56",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6276fd37_24b5229b",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3c66f53_c38e36a1",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 104,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "+danilchap@ - what is the guideline in such a case? We can probably still push_back because of move-semantics?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08707d40_e0bda476",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 104,
      "author": {
        "id": 1138974
      },
      "writtenOn": "2017-07-27T19:44:00Z",
      "side": 1,
      "message": "Use push_back here.\n\nemplace_back and push_back are different functions.\nemplace_back(a,b,c) is a shortcut for push_back(T(a,b,c)) [or insert(T(a,b,c)) for map/set].\n\nHere it make false impression rsid is some type that can be explicitly created from std::string.\npush_back ensure it is std::string or something so similar it can be implicitly converted from std::string",
      "parentUuid": "f3c66f53_c38e36a1",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7ad0e7d_b1ddb027",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "You probably want to pass in a reference to the map, rather than a copy of it.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f7d9af_83202986",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "Good catch, thanks.",
      "parentUuid": "d7ad0e7d_b1ddb027",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26dcdd61_74630f7e",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "I think you\u0027re looking for std::next() here. That would probably be easier than defining a variable, moving it, and then forgetting it.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edb11e3e_fe96da59",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "Thanks, that does look like what I need here.",
      "parentUuid": "26dcdd61_74630f7e",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "497f75f6_1cbf66d2",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "Why do we use a multimap, if we don\u0027t really support multiple values being mapped to the same key?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5faf92b_63139944",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "To simplify the implementation of AddSink/RemoveSink.",
      "parentUuid": "497f75f6_1cbf66d2",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef0df2a7_5829c2f0",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:27:54Z",
      "side": 1,
      "message": "This is a very big function (~70 lines), and should probably be broken down.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff06143c_dc85f806",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef0df2a7_5829c2f0",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37de15aa_78f692cf",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:27:54Z",
      "side": 1,
      "message": "nit: const",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 150,
        "endChar": 32
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86d22925_205eaf75",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:27:54Z",
      "side": 1,
      "message": "std::next() here too?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f1a1f14_f0166098",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:27:54Z",
      "side": 1,
      "message": "nit: Full stops at the end of the logs?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81323831_f19f79e4",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "Why are we using ranges for mids?  Why not just use \"sinks_by_mid_.find(mid)\" and \"!\u003d sinks_by_mid.end()\"?",
      "range": {
        "startLine": 158,
        "startChar": 80,
        "endLine": 158,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f44f503_8697ea3e",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T22:39:13Z",
      "side": 1,
      "message": "It\u0027s a multimap. This code needs to differentiate there being no sink for the MID, one sink, or multiple sinks.",
      "parentUuid": "81323831_f19f79e4",
      "range": {
        "startLine": 158,
        "startChar": 80,
        "endLine": 158,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a60d1eda_54caab14",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "The binding here should take place even if it overwrites an existing ssrc-\u003esink mapping.  So I think this needs to directly alter sink_by_ssrc_ and not use AddSsrcSinkBinding, and always return mid_sink.",
      "range": {
        "startLine": 163,
        "startChar": 44,
        "endLine": 163,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d5f30cb_c6f29be3",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T20:39:22Z",
      "side": 1,
      "message": "This is the very cornery case where a packet is received with the same SSRC as seen before but a different MID. If we follow the BUNDLE algorithm to the letter, I guess this would replace the SSRC-\u003esink mapping, but that seems incorrect to me. This is something that should never happen unless the other endpoint is misbehaving, so it\u0027s probably not worth too much thought, as long as the behavior is deterministic and tested.",
      "parentUuid": "a60d1eda_54caab14",
      "range": {
        "startLine": 163,
        "startChar": 44,
        "endLine": 163,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "017fd1f1_af8020fe",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T20:53:05Z",
      "side": 1,
      "message": "This isn\u0027t just about two MIDs with one SSRC.  This is about you signaled an SSRC rule and later a MID rule.  The MID rule should override the SSRC rule.  \n\nI think we should follow the algorithm here because it took a long time and a lot of conversations like this to arrive at that algorithm.  I\u0027d rather not repeat all of that.",
      "parentUuid": "0d5f30cb_c6f29be3",
      "range": {
        "startLine": 163,
        "startChar": 44,
        "endLine": 163,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21999797_2c3abea0",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T22:39:13Z",
      "side": 1,
      "message": "\u003e This is about you signaled an SSRC rule and later a MID rule.\n\nDo you mean:\n\n1. Signal \"SSRC X \u003d Track A\"\n2. Signal \"MID foo \u003d Track B\"\n3. Receive packet with SSRC X; it\u0027s mapped to track A.\n4. Receive packet with SSRC X, *and* MID \"foo\". This packet is either discarded (what the code above does) or mapped to track B.\n\nIs that what you\u0027re describing? Mapping one SSRC to two sinks still seems wrong to me. But if this was an intended side effect of the BUNDLE algorithm, ok. It would be nice if the BUNDLE spec explained the reasoning for this, since it\u0027s easy to assume that corner cases like this just weren\u0027t considered (that\u0027s typically what I find when I dig into a corner case in BUNDLE).",
      "parentUuid": "017fd1f1_af8020fe",
      "range": {
        "startLine": 163,
        "startChar": 44,
        "endLine": 163,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d402b3_c1b9baec",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "I think you can just do \"if(ssrc_sink)\".",
      "range": {
        "startLine": 170,
        "startChar": 29,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3273ff54_ddb78d65",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "Same here with the unneeded \"!\u003d nullptr\".",
      "range": {
        "startLine": 177,
        "startChar": 37,
        "endLine": 177,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "536fd9af_a0f176c8",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "Same here with needing to overwrite an existing SSRC-\u003esink mapping.",
      "range": {
        "startLine": 180,
        "startChar": 57,
        "endLine": 180,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1083b77_caef9e31",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 192,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:27:54Z",
      "side": 1,
      "message": "1. If the SSRC binding works, this will never be triggered again, since from now on, the lookup algorithm would also run into the SSRC and exit the function before reaching this line. ResolveRsidToSsrcAssociations() therefore deleted the RSID at that point. Perhaps you want to either keep ResolveRsidToSsrcAssociations() around and use it, or delete the RSID yourself? Wdyt?\n2. Maybe log some error if this returns false?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b321bc95_23afdfe9",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 192,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "1. Does RSID not have the same semantics as MID? That is, could the sender use a new SSRC with the same RSID and we should still route it?\n2. Shouldn\u0027t ever return false because of the SSRC check above, so I think a DCHECK would be the most appropriate here.",
      "parentUuid": "f1083b77_caef9e31",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bf24aa4_1998891d",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "I think we should just delete this rule and force RSIDs to be unique.",
      "range": {
        "startLine": 208,
        "startChar": 3,
        "endLine": 208,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13644725_1f94b9bc",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T20:39:22Z",
      "side": 1,
      "message": "Does the spec require that? If not, then we\u0027re going to need this functionality eventually. If we decide not to support it now, we should at least be sure to call that out in the header file and have tests for its lack of support, and TODOs.",
      "parentUuid": "8bf24aa4_1998891d",
      "range": {
        "startLine": 208,
        "startChar": 3,
        "endLine": 208,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd4025f6_fc5dde4f",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T20:53:05Z",
      "side": 1,
      "message": "Demuxing tracks by RSID is already outside the bounds of the spec, so it says nothing about it.  We\u0027re not going to need this eventually.  I think we should just delete it and never use RSID for track-level demux.  RSID should only be used as an encoding-level demux within a track.  There\u0027s no reason to keep RSID-based track-level demux other than that code was already here (which is kind of dubious to begin with).",
      "parentUuid": "13644725_1f94b9bc",
      "range": {
        "startLine": 208,
        "startChar": 3,
        "endLine": 208,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76bc3f0f_853d1064",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1132136
      },
      "writtenOn": "2017-07-27T22:39:13Z",
      "side": 1,
      "message": "\u003e We\u0027re not going to need this eventually.\n\u003e There\u0027s no reason to keep RSID-based track-level demux other than that code was already here\n\nThat code is not dead, it\u0027s being used today in production for encoding-level demux (technically, RTP stream-level). The comments on the design doc from Danil talk about this. I thought the current plan was to have one RtpDemuxer class that can handle different types of demuxing depending on the application\u0027s need. Maybe we need to sync up again and update the doc...",
      "parentUuid": "cd4025f6_fc5dde4f",
      "range": {
        "startLine": 208,
        "startChar": 3,
        "endLine": 208,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83b9d50c_70c30d8c",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "1. I wonder, with C++11, do we still want to use the macro? (If I am not mistaken, it used to use some hack to achieve a similar result to what is now done using C++11\u0027s \"\u003d delete\".)\n2. Do we really want to disallow these for RtpDemuxerCriteria? What\u0027s the rationale?\n3. Do we perhaps want to disallow those for the RtpDemuxer itself?",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "547e966b_99f29e06",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "1. Not sure what the best practice is for using the macro vs. declaring the copy/assign with \u003ddelete. Looks like the macro does exactly that.\n2. I don\u0027t think RtpDemuxerCriteria will normally be copied/assigned, so I did not want to implement those behaviors unless they would be useful.\n3. Yes, I think it makes even less sense to copy/assign the RtpDemuxer.",
      "parentUuid": "83b9d50c_70c30d8c",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae44d17_c22584d9",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "This seems like something we should get rid of across the code base and use the C++ way.  The C++ style guide says to not use it (or the non-RTC version) any more:\n\nhttps://yaqs.googleplex.com/eng/q/6440554812932096\n\n\nWe might want to verify on a thread to webrtc-eng, though.\n\n\nAs for whether this should copyable: I don\u0027t see why a struct shouldn\u0027t be copyable, so might as well allow it.  But classes are different.  It doesn\u0027t make sense to me to copy an RtpDemuxer.",
      "parentUuid": "547e966b_99f29e06",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27b33410_b69847f4",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "The word \"uniquely\" in the comment makes me wonder. The algorithm from the draft explicitly says \"drop and stop\" or \"route and stop\" in some cases. So I see nothing stopping us from encountering an RTP packet that matches several criteria(*), that nevertheless gets routed, or that matches only one criterion, but gets dropped. So I think this comment is misleading.\n\n(*) This is under the interpretation that \"criteria\" corresponds to members of RtpDemuxerCriteria.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d8d3f6_93c6c0b1",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "The intention of the spec\u0027s algorithm is to route to one sink.\n\nBut calling it \"uniquely match\" isn\u0027t quite right.  It\u0027s more like \"when the algorithm picks one sink, and you\u0027re sink it picked\".",
      "parentUuid": "27b33410_b69847f4",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df58014e_8bf829f5",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "1. Another option that would lead to returning false is illegal RSID/MID names, etc.\n2. Might (open for discussion) be good to have the comment mention what happens in cases that lead to false being returned. Can partial configuration ever be applied, or is it all or nothing? For example, what happens if you try to AddSink() with one legal MID and several RSIDs, one of which is illegal? MID configuration guaranteed to be applied? Guaranteed to not be applied? No guarantee? Then again, I could be over-engineering this...",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "251f2740_d5c24e68",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "1. Not sure what you mean by illegal RSID/MID names? There\u0027s currently a DCHECK that ensures all the names are legal. Should it be changed to a CHECK or just return false in that case?\n2. I think the reader would assume that AddSink would be all or nothing, making no changes if false is returned. I can add a brief note confirming that.\n\nHandling conflicts between overlapping MIDs/RSIDs/payload types/SSRCs does seem to be complicated and arbitrary in some cases. It\u0027s hard to really tell what\u0027s the right behavior without knowing how clients will use the class.",
      "parentUuid": "df58014e_8bf829f5",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad9175a5_9c5486a6",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "It should definitely be all or nothing.  If false is returned, it should be as though you never added it.\n\nOverlap isn\u0027t that complicated:\n- MID overlap should be rejected\n- SSRC overlap should be rejected\n- PT overlap should be allowed, but then that PT is not longer used for routing.\n\nThe only unclear one is RSID.  I\u0027d say for now we reject it if RSID overlaps.",
      "parentUuid": "251f2740_d5c24e68",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4956b267_99988262",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "It should reject if the MID is already registered as well (and probably RSID).",
      "range": {
        "startLine": 65,
        "startChar": 32,
        "endLine": 65,
        "endChar": 0
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cb71977_d5ce6ec5",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "nit: The function itself is const.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acdcc892_780bbab7",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:33:09Z",
      "side": 1,
      "message": "Hmm, or maybe not, because of SSRC-binding resolutions. Please ignore that comment.",
      "parentUuid": "7cb71977_d5ce6ec5",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26e70ac9_d5d10501",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "FYI, at least for RSIDs, there will be another vector of discovery - specific RTCP messages that resolve the RSID-SSRC bindings. (This comment is not actionable.)",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb9daf4b_b23b2de8",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "That is also true of MIDs.  But this comment can be updated when we actually add support for that (which we don\u0027t currently have, do we?).",
      "parentUuid": "26e70ac9_d5d10501",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a6a35f2_4e814060",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "Maybe we could talk offline? I didn\u0027t understand why this needs to be a multimap. Similarly for some other multimaps.",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72763998_75487e98",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "If multiple sinks are registered with criterias that overlap by one field we need to know if it is ambiguous (i.e., more than one value for the key) so that we don\u0027t use that payload type/MID/RSID to route. The alternative is to have a regular map that stores nullptr or some sentinel value to indicate a conflict, but that makes RemoveSink difficult to implement.",
      "parentUuid": "5a6a35f2_4e814060",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f9b2ad1_e8450479",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "A multimap is the easiest way to accomplish the funny PT demux properties which are, basically, \"if and only if it\u0027s unique, you may demux with it (after MID and SSRC don\u0027t match)\".  There are other ways this could be implemented, but I think this is the easiest we\u0027ve come up with so far.",
      "parentUuid": "72763998_75487e98",
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3150394d_151dcb43",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-27T15:15:47Z",
      "side": 1,
      "message": "1. Comment explaining RSID with/without MID?\n2. Would it be possible to merge these two containers if we use the sentinel value of the empty string to mean an absent MID?\n3. I\u0027m not sure why these are multimaps.",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 121,
        "endChar": 25
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1da2389_25a1e9e5",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-27T18:18:36Z",
      "side": 1,
      "message": "I think that might be possible. It certainly would simplify things a bit. I\u0027ll try to change that implementation and see if it would break any behaviors.",
      "parentUuid": "3150394d_151dcb43",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 121,
        "endChar": 25
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10d43982_c98d02df",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-27T19:55:30Z",
      "side": 1,
      "message": "I think it would be easier to not treat RSIDs like PTs where they can overlap.  I\u0027d say we only do the non-standard RSID track-level demux if the RSIDS don\u0027t overlap. The complexity of anything else isn\u0027t worth it.",
      "parentUuid": "d1da2389_25a1e9e5",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 121,
        "endChar": 25
      },
      "revId": "d72bad0ae326dcb5044187e8b699615221d74a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}