{
  "comments": [
    {
      "key": {
        "uuid": "ca906b42_c4d73e71",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "s/!x.size()/!x.empty()",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfa58ba5_b87b5cb9",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "Why do we not allow them both to be empty?  Setting a MID should be sufficient.\n\nBasically you want to check that it\u0027s not the case that the whole thing is empty, but that means checking MID and RSIDs as well.",
      "parentUuid": "ca906b42_c4d73e71",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65b1c028_fc9450ff",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Yes, that\u0027s what the check does (see the line below this).",
      "parentUuid": "bfa58ba5_b87b5cb9",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22dcc82d_b1133d21",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Good catch, I\u0027ll fix that.",
      "parentUuid": "ca906b42_c4d73e71",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8f7325c_a977d90b",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "I\u0027d prefer:\nRTC_DCHECK(!criteria.mid || Mid::IsLegalName(*criteria.mid));",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 21
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "550a9859_81fde117",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "I think it\u0027s a bit more clear with the explicit if statement.",
      "parentUuid": "f8f7325c_a977d90b",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 21
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5f05cb0_e788e9db",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T17:45:31Z",
      "side": 1,
      "message": "I\u0027d suggest you ask someone with more seniority than me, then, because I\u0027ve been led to believe that my suggestion is more in-line with the coding style.",
      "parentUuid": "550a9859_81fde117",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 21
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcb5bec3_0ca28322",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 44,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "Similarly.",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 44,
        "endChar": 3
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "696c8666_4ff5e6ba",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "Shouldn\u0027t we check the return value and fail the whole operation if it fails?\n\nAnd if we fail half way, we need to unwind it so it\u0027s back in the original state.",
      "range": {
        "startLine": 48,
        "startChar": 35,
        "endLine": 48,
        "endChar": 0
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b128b230_432a9571",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "If we use the algorithm I wrote below, this would end up being something like:\n\nif (criteria.mid) {\n  sink_by_mid[criteria.mid] \u003d sink;\n}\nfor (auto ssrc : criteria.ssrcs) {\n  sink_by_ssrc[ssrc] \u003d sink;\n}\nfor (auto pt : criteria.pts) {\n  sinks_by_pt[pt].add(sink);  // Needs to be a multimap.\n}\n\n\nExcept that it also needs the \"check to see if there\u0027s already a mapping, and return false if there is\".  \n\nOh, and there is one bit of funny business: if MID latching adds an ssrc to the ssrc table and then a rule also adds the ssrc to a different sink, we have to decide whether to reject that rule over overwrite the latching.  Rejecting the rule is easier, but if it\u0027s easy to implement, we could consider overwriting.  The problem with overwriting is that you then need to remember if the SSRC came from a rule or from latching.  I\u0027m inclined to say just reject the rule and if anyone ever hits this edge case then do something about it (really, no one should ever do that).",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6774fe3_be163286",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Why would the class need to know whether the SSRC came from a rule or latching? If latching, it will already have the correct sink bound to the SSRC explicitly (i.e., there won\u0027t be a need to check MID except for the first time the SSRC is used).",
      "parentUuid": "b128b230_432a9571",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cfa2d89_4501ad1b",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T17:39:24Z",
      "side": 1,
      "message": "The demux wouldn\u0027t need to.  The AddSink would need to, in order to know whether to overwrite or reject a new rule.  It would be more simple to just reject and not keep track, though.",
      "parentUuid": "c6774fe3_be163286",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e2002a_eb079a50",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "I don\u0027t see where this local variable is used. I conclude that the CL is still WIP. I\u0027ll stop reviewing here, so as to not bother you with unnecessary comments, but I\u0027ll still send in what I\u0027ve drafted so far, because I think it might be useful. Please ping me when you want me to resume the review.",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe540e24_e6146cfe",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Sorry about that. I\u0027ll finish these AddSink methods today.",
      "parentUuid": "43e2002a_eb079a50",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "617a7a59_55a6a021",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T17:45:31Z",
      "side": 1,
      "message": "No worries! Just ping me when you\u0027d like me to have a look again.",
      "parentUuid": "fe540e24_e6146cfe",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6c859b2_4dc4ac5a",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "?",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c07926a4_e195a978",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "This doesn\u0027t follow the algorithm in the spec.  It should be something more like (written in a \"return sink\" model, which I think would be cleaner, and then OnRtpPacket is basically \"sink \u003d GetSink(...); if (sink) { sink-\u003eOnRtpPacket(packet); }\").\n\nif (packet.mid) {\n  auto sink \u003d sink_by_mid_[packet.mid];\n  if (!sink) {\n    return null;\n  }\n  sink_by_ssrc[packet.ssrc] \u003d packet.ssrc; \n  return *sink;\n}\n\nauto sink \u003d sink_by_ssrc_[packet.ssrc];\nif (sink) {\n  return sink;\n}\n\nauto sinks \u003d sinks_by_pt_[packet.pt];\nif (sinks.size() \u003d\u003d 1) {\n  sink_by_ssrc[packet.ssrc] \u003d packet.ssrc;\n  return sinks[0];\n}\n\nreturn null;",
      "range": {
        "startLine": 99,
        "startChar": 26,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e3d722c_00a3e724",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "How would RSIDs be supported by this algorithm? Wouldn\u0027t they need to be scoped by MID as well (i.e., the mapping would be from std::pair\u003cmid, rsid\u003e to sinks)?",
      "parentUuid": "c07926a4_e195a978",
      "range": {
        "startLine": 99,
        "startChar": 26,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccc9588c_26efdac4",
        "filename": "webrtc/call/rtp_demuxer.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T17:39:24Z",
      "side": 1,
      "message": "RSIDs would just be one more thing at the end after everything else:\n\nif (packet.rsid) {\n  auto sink \u003d sink_by_rsid[packet.rsid];\n  if (sink) {\n    sink_by_ssrc[packet.ssrc] \u003d sink;\n    return sink;\n  }\n}\n\n\nAlthough I really think we should just remove this and only use RSID for knowing the encoding, not for knowing the track.  This is non-standard and assumes RSIDs are unique across MIDs (not scoped to MIDs), which is not true in the general case.",
      "parentUuid": "6e3d722c_00a3e724",
      "range": {
        "startLine": 99,
        "startChar": 26,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b61b6cd_75fa4734",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "?",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01a2062e_007f2b44",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Was going to use it for RtpDemuxerCriteria, but went with a different solution. I\u0027ll remove it.",
      "parentUuid": "8b61b6cd_75fa4734",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e575f1df_0bdfd7fa",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "1. Might be better to do this as a separate CL, as people are likely to have some comments.\n2. Speaking of comments :-), I think ssrcs and payload_types should also be optional.\n3. Also, one sink might be associated with multiple RSIDs, as far as I remember; it\u0027s only that one RSID cannot be associated with multiple sinks.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 34
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26476610_3683db3e",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "While I thought we could have added MID demux without the struct, I think it\u0027s OK if we add the struct and implement the whole demux algorithm in one CL.\n\nAs for ssrcs and payload types: I don\u0027t think there is any difference between an optional unset vector and an empty vector.\n\nRSIDs should be a vector.  It\u0027s only the MID that should not be a vector.",
      "parentUuid": "e575f1df_0bdfd7fa",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 34
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6becd3e_fb671e16",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "1. I think this is the appropriate CL to do this in? There isn\u0027t much to change without the new interface.\n2. Yes, they are optional. Empty vector means that it won\u0027t match according to SSRC/payload types and will defer to mid/rsid.\n3. OK, I\u0027ll change rsid to a vector instead of an optional.\n\nI\u0027ll add comments to this struct to decide how it should be used.",
      "parentUuid": "e575f1df_0bdfd7fa",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 34
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97e537e5_e62da9c9",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "I would reorder these in order of how they should be used and how the algorithm uses them:\n\nmid\nssrcs\npayload_types\nrsids",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 0
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8328216_57bdd670",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "This implies to me a type of score, but I am not sure how the score would be calculated. Possibly a non-weighted one, where any criterion is given a score of 1, and the sums are compared? But that doesn\u0027t seem to correspond to the algorithm in https://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-38#section-10.2 (pages 21 bottom to 22 top).",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 49,
        "endChar": 34
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d91724e1_e12fa315",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "A \"score\" or \"weight\" is not the right way to think about this.  It\u0027s more like it routes on MID, then SSRC, then PT, then RSID.  If you give conflicting routes (which you shouldn\u0027t modulo the whole overlapping PT thing), then MID will take precedent over SSRC over PT over RSID.",
      "parentUuid": "f8328216_57bdd670",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 49,
        "endChar": 34
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95a9afcf_4f7edac3",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Yeah, I\u0027ll rewrite this comment so it makes more sense.",
      "parentUuid": "f8328216_57bdd670",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 49,
        "endChar": 34
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f28a0af6_8657b3b1",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "So unbroken ties lead to dropped packets?",
      "range": {
        "startLine": 50,
        "startChar": 46,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54bdd495_e176280a",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "There is no such thing as a tie.  Unknown MIDs lead to dropped packets.  no MID + unknown SSRC + unknown or overlapping PTs + unknown RSID leads to a dropped packet.  I think that everything else is not dropped.",
      "parentUuid": "f28a0af6_8657b3b1",
      "range": {
        "startLine": 50,
        "startChar": 46,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "760ce821_883a3c32",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Yes, because there is no way to figure out which sink should get the packet (and each packet should only be routed to at most one sink).",
      "parentUuid": "f28a0af6_8657b3b1",
      "range": {
        "startLine": 50,
        "startChar": 46,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dc214a0_e1f10ce4",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T17:45:31Z",
      "side": 1,
      "message": "Peter, I think we\u0027re in agreement. The IETF draft says something different than what the comment and code say, and that\u0027s what I was pointing out, unless I\u0027m misunderstanding the comment/code.",
      "parentUuid": "760ce821_883a3c32",
      "range": {
        "startLine": 50,
        "startChar": 46,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "995657ad_1b12d112",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "This seems to contradict the following line from the aforementioned IETF draft:\n  If the packet has a MID, and that MID is not in the table mapping\n  MID to \"m\u003d\" line, drop the packet and stop.",
      "range": {
        "startLine": 53,
        "startChar": 5,
        "endLine": 54,
        "endChar": 18
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "312dd8b3_bae148e2",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "Right.  It\u0027s conceptually MID, SSRC, PT, RSID.  It\u0027s just that there\u0027s also SSRC \"latching\" on top of that.  But the SSRCs that are latched or not the SSRCs that are passed into AddSink.",
      "parentUuid": "995657ad_1b12d112",
      "range": {
        "startLine": 53,
        "startChar": 5,
        "endLine": 54,
        "endChar": 18
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0fcca22_63837f4b",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Right now this case isn\u0027t handled explicitly because it would require either an expensive vector traversal on each packet receive or the need to maintain a mapping of MID to sinks which would add more complexity to the class. With the current algorithm if the packet has an unknown MID and unknown SSRC it will get dropped because it won\u0027t match any sink. Maybe a question more for Peter if this is an acceptable tradeoff.",
      "parentUuid": "995657ad_1b12d112",
      "range": {
        "startLine": 53,
        "startChar": 5,
        "endLine": 54,
        "endChar": 18
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41349720_9cf7b0cd",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T17:45:31Z",
      "side": 1,
      "message": "Peter, about:\n\"But the SSRCs that are latched or not the SSRCs that are passed into AddSink.\"\nI assume the \"or\" should be an \"are\"? Not trying to nitpick, just trying to make sure I don\u0027t end up misunderstanding.\nAssuming I understood correctly - the way I see it, the RtpDemuxer should handle according to the IETF draft the case that an SSRC that was configured with AddSink (from the SDP) was later latched from a MID, even if this is never supposed to happen.\n\nSteve, about the trade-off: I\u0027m assuming we won\u0027t have so many sinks, that traversing any of the containers would incur a cost significant enough to justify sacrificing correctness for efficiency. (Sacrificing correctness to lower complexity is a different story.)",
      "parentUuid": "c0fcca22_63837f4b",
      "range": {
        "startLine": 53,
        "startChar": 5,
        "endLine": 54,
        "endChar": 18
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13e2eeea_9c70de3d",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T11:01:15Z",
      "side": 1,
      "message": "All of the predicates seem to be of the same type, so I wonder if we could get rid of the template and move the implementation to the .cc file?\n(Assuming this is still useful after other comments, that is.)",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc0d3a7c_b23642c6",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "OK, I\u0027ll look into replacing it with an std::function and moving it to the .cc file.",
      "parentUuid": "13e2eeea_9c70de3d",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eb0dc86_bde758c5",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T17:45:31Z",
      "side": 1,
      "message": "By the way, I am not sure if the word \"predicate\" is appropriate for functions that have side-effects?",
      "parentUuid": "dc0d3a7c_b23642c6",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5969729_502d52ef",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 108,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "I think this would be more simple with 3 maps: sink_by_ssrc (same as below), sink_by_mid, and sinks_by_pt (needs to be a multimap).  Then you don\u0027t need this.",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92f0e363_53b99216",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 108,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "I looked at doing it that way originally, but it looked like it was going to be more complicated because there are many more states that need to be tracked explicitly.\n\nFor example, if two sinks share payload_type but have different MIDs, then the map either needs to store nullptr to signal that there is a conflict or change it to a multimap and identify that there are multiple sinks when trying to match the packet. If storing nullptr, then if a sink is ever removed it needs to look through all the sinks again to see if now one of the payload_types is unique and update the table accordingly.\n\nI\u0027ll see if there\u0027s a way to simplify that implementation because it would allow doing MID checking (as required by the spec, discussed above) cheaper.",
      "parentUuid": "b5969729_502d52ef",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a338eed_f841e9aa",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 108,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T17:39:24Z",
      "side": 1,
      "message": "I think changing it to a multimap is a simple solution here.  If there is exactly one sink in the multimap for a given PT, then route to that one.  Otherwise, drop the packet (or try RSIDs if we support it).\n\nBy the way, we don\u0027t need to worry about perf so much except for two situations:\n\n1.  Make sure demuxing by SSRC when a MID is not present and PT or MID latching is done.   This is by far the common case.  And one map lookup is good enough I think.\n\n2.  Make sure that when we have an MID it\u0027s still fast.  Again, one map lookup is good enough.\n\n\nEverything else can be slow (PT or RSID before latching).  So if you want just two maps (_by_mid and _by_ssrc) and fallback to iterating over a set of criteria for PT and RSID instead of a multimap, that would be fine.  But I think a PT multimap is the most simple and straightforward approach.",
      "parentUuid": "92f0e363_53b99216",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73a962de_40b42fad",
        "filename": "webrtc/call/rtp_demuxer.h",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "As mentioned above, I think this should be sink_by_ssrc along with sink_by_mid and sinks_by_pt.",
      "range": {
        "startLine": 119,
        "startChar": 65,
        "endLine": 119,
        "endChar": 0
      },
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b1c48d2_066d8088",
        "filename": "webrtc/call/rtp_demuxer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 799,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "We need some tests around PTs, especially these tricky cases:\n\nAddSink(pt\u003d100, sink_a);  // 100 goes to sink_a\nAddSink(pt\u003d100, sink_b);  // 100 gets dropped\nRemoveSink(sink_b);  // 100 goes to sink_a\nAddSink(pt\u003d100, sink_b);  // 100 gets dropped\nRemoveSink(sink_a);  // 100 goes to sink_b",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e63e699_7c0bdc6e",
        "filename": "webrtc/call/rtp_demuxer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 799,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9b1c48d2_066d8088",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8709fb4_81c89fe3",
        "filename": "webrtc/call/rtp_demuxer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 801,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2017-07-26T16:45:22Z",
      "side": 1,
      "message": "We also need a test for when the MID isn\u0027t known.  It should always drop.",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "045ad3e2_f8363d50",
        "filename": "webrtc/call/rtp_demuxer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 801,
      "author": {
        "id": 1228509
      },
      "writtenOn": "2017-07-26T17:07:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d8709fb4_81c89fe3",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105be9f8_faebf270",
        "filename": "webrtc/call/rtp_demuxer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 801,
      "author": {
        "id": 1179449
      },
      "writtenOn": "2017-07-26T17:45:31Z",
      "side": 1,
      "message": "Peter:\nhttps://chromium-review.googlesource.com/c/578628/3/webrtc%252Fcall%252Frtp_demuxer_unittest.cc#595",
      "parentUuid": "045ad3e2_f8363d50",
      "revId": "0a97b9ad3cf6a28dcae2d40b958c3b1044f1c39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}