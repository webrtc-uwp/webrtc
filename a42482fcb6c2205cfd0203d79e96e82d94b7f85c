{
  "comments": [
    {
      "key": {
        "uuid": "327dd221_7ad82b59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-03T11:25:50Z",
      "side": 1,
      "message": "Spelling",
      "range": {
        "startLine": 9,
        "startChar": 31,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b94bab91_21e8986c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-10-03T13:00:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "327dd221_7ad82b59",
      "range": {
        "startLine": 9,
        "startChar": 31,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4992b17_b351526c",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-03T11:25:50Z",
      "side": 1,
      "message": "There\u0027s no |AddPacket| method here. Better to either give the methods by name (OnPacketAdded and OnPacketFeedbackVector?), or just refer to the implemented interface.",
      "range": {
        "startLine": 116,
        "startChar": 59,
        "endLine": 116,
        "endChar": 68
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a35777e_33f5d63c",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-10-03T13:00:30Z",
      "side": 1,
      "message": "oops, confused with function that call OnPacketAdded.\nfixed, thank you.",
      "parentUuid": "b4992b17_b351526c",
      "range": {
        "startLine": 116,
        "startChar": 59,
        "endLine": 116,
        "endChar": 68
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8dcbc49_36718851",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-03T11:25:50Z",
      "side": 1,
      "message": "I think moving this call last is an improvement, but it doesn\u0027t quite eliminate the race. \n\nThe vtable entry for OnAddPacket are likely not assigned yet by the time this runs (if I\u0027ve understood correctly, calling virtual methods from within the constructor will get the superclass implementation). For testing, you could try adding a call to OnPacketAdded here and see what happens, it may well jump to nullptr.\n\nSome different ways to really solve the problem are\n\n* Register some other object than |this|, packet_loss_tracker_ is close to usable, but not quite.\n\n* Postpone registration until after construction, with some kind of Init method.\n\n* Hold some lock in the caller of the constructor, to prevent the callbacks from being called concurrently with the constructor. I did it like that in the FlexfecReceiveStreamImpl, which uses |this| in the same risky way.\n\nIf you can\u0027t solve the problem completely in this cl, at least add a TODO item.",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9f57008_f633b2fd",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-10-03T13:00:30Z",
      "side": 1,
      "message": "Reading 12.6.2 16 Initializing bases and members of the c++ spec:\n\"Member functions (including virtual member functions, 10.3) can be called for an object under construction. However, if these operations are performed in a ctor-initializer (or in a function called directly or indirectly from a ctor-initializer) before all the mem-initializers for base classes have completed, the result of the operation is undefined\"\n\nhere it is called after ctor-initiaizer.",
      "parentUuid": "c8dcbc49_36718851",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07c11df3_bafc0f0b",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-03T13:11:40Z",
      "side": 1,
      "message": "\u003e Reading 12.6.2 16 Initializing bases and members of the c++ spec:\n\u003e \"Member functions (including virtual member functions, 10.3) can be called for an object under construction. However, if these operations are performed in a ctor-initializer (or in a function called directly or indirectly from a ctor-initializer) before all the mem-initializers for base classes have completed, the result of the operation is undefined\"\n\u003e \n\u003e here it is called after ctor-initiaizer.\n\nHmm.\n\nSo it appears safe in this case. But if one would try to subclass this method and override the OnPacket* methods, we get a race where the wrong implementation might be called?\n\nI think this is subtle, and a pattern one should try to avoid. If you can formulate some brief comment, that would be nice.",
      "parentUuid": "e9f57008_f633b2fd",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a06bdce_c6fbced1",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-10-03T13:17:15Z",
      "side": 1,
      "message": "AudioSendStream is final",
      "parentUuid": "07c11df3_bafc0f0b",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "a42482fcb6c2205cfd0203d79e96e82d94b7f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}