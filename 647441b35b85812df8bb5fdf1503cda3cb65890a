{
  "comments": [
    {
      "key": {
        "uuid": "1e3061f2_a809796a",
        "filename": "webrtc/api/video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-20T07:14:52Z",
      "side": 1,
      "message": "This works fine with scoped_refptr, even if it\u0027s not entirely kosher to convert from raw pointer to scoped_refptr. And it won\u0027t work, as far as I understand, if we ever try to replace scoped_refptr with std::shared_ptr. The Get* functions can be changed to return raw const pointer, but we can\u0027t do that with ToI420.\n\nSo I wonder if you have any plan, or if we\u0027re just punting those issues until we actually try to adopt shared_ptr. Should we ask some c++ expert? I\u0027d wish there were some way to declare a particular method that can be called only on a shared_ptr, making |this| a shared_ptr.",
      "range": {
        "startLine": 21,
        "startChar": 21,
        "endLine": 21,
        "endChar": 40
      },
      "revId": "647441b35b85812df8bb5fdf1503cda3cb65890a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "816e59ac_e9bacee1",
        "filename": "webrtc/api/video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1117641
      },
      "writtenOn": "2017-06-20T09:17:33Z",
      "side": 1,
      "message": "Let\u0027s try to change the return type of GetI420 to a raw pointer. For ToI420, I\u0027m aware it will be problematic if/when we move to std::shared_ptr. I don\u0027t want to spend any time on it now, since I\u0027m not sure we will ever move to std::shared_ptr.\n\nOne solution I can think of is to make a deep copy in ToI420 if the frame is already I420BufferInterface (or simply disallow calling ToI420 for I420BufferInterface), and instead introduce a static function that clients can use if they don\u0027t know if the frame is already I420 or not:\nstd::shared_ptr\u003cI420BufferInterface\u003e GetOrConvertToI420(\n    std::shared_ptr\u003cVideoFrameBuffer\u003e buffer) {\n  return (buffer-\u003etype() \u003d\u003d Type::kI420)\n             ? std::static_pointer_cast\u003cI420BufferInterface\u003e(buffer)\n             : buffer-\u003eToI420();\n}",
      "parentUuid": "1e3061f2_a809796a",
      "range": {
        "startLine": 21,
        "startChar": 21,
        "endLine": 21,
        "endChar": 40
      },
      "revId": "647441b35b85812df8bb5fdf1503cda3cb65890a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "622481e9_0fbdd504",
        "filename": "webrtc/api/video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1144186
      },
      "writtenOn": "2017-06-20T09:55:44Z",
      "side": 1,
      "message": "\u003e Let\u0027s try to change the return type of GetI420 to a raw pointer.\n\nMake sense, can we do that as a cl to be landed before this one?\n\n\u003e For ToI420, I\u0027m aware it will be problematic if/when we move to std::shared_ptr. I don\u0027t want to spend any time on it now, since I\u0027m not sure we will ever move to std::shared_ptr.\n\nOk. Nevertheless some thoughts below.\n \n\u003e One solution I can think of is to make a deep copy in ToI420 if the frame is already I420BufferInterface (or simply disallow calling ToI420 for I420BufferInterface), and instead introduce a static function\n\nA static method would solve part of the problem, it could even call some private/protected method passing the shared pointer (or even refcount pointer only) as an argument, to enable that method to return a shared pointer.",
      "parentUuid": "816e59ac_e9bacee1",
      "range": {
        "startLine": 21,
        "startChar": 21,
        "endLine": 21,
        "endChar": 40
      },
      "revId": "647441b35b85812df8bb5fdf1503cda3cb65890a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}